{"remainingRequest":"/Users/liquanfang/projects/fileupload/fileupload-vue/node_modules/babel-loader/lib/index.js!/Users/liquanfang/projects/fileupload/fileupload-vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/liquanfang/projects/fileupload/fileupload-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liquanfang/projects/fileupload/fileupload-vue/src/components/globalUploader.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/liquanfang/projects/fileupload/fileupload-vue/src/components/globalUploader.vue","mtime":1555836469746},{"path":"/Users/liquanfang/projects/fileupload/fileupload-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liquanfang/projects/fileupload/fileupload-vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/liquanfang/projects/fileupload/fileupload-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liquanfang/projects/fileupload/fileupload-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"/Users/liquanfang/projects/fileupload/fileupload-vue/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/**\n *   全局上传插件\n *   调用方法：Bus.$emit('openUploader', {}) 打开文件选择框，参数为需要传递的额外参数\n *   监听函数：Bus.$on('fileAdded', fn); 文件选择后的回调\n *            Bus.$on('fileSuccess', fn); 文件上传成功的回调\n */\n// import Bus from './js/bus';\nimport SparkMD5 from 'spark-md5';\nexport default {\n  data: function data() {\n    return {\n      options: {\n        target: '/index/fileUpload',\n        chunkSize: 5 * 1024 * 102,\n        fileParameterName: 'param',\n        maxChunkRetries: 3,\n        testChunks: true,\n        //是否开启服务器分片校验\n        // 服务器分片校验函数，秒传及断点续传基础\n        checkChunkUploadedByResponse: function checkChunkUploadedByResponse(chunk, message) {\n          var objMessage = JSON.parse(message);\n\n          if (objMessage.skipUpload) {\n            return true;\n          }\n\n          return (objMessage.uploaded || []).indexOf(chunk.offset + 1) >= 0;\n        },\n        headers: {// Authorization: Ticket.get() && \"Bearer \" + Ticket.get().access_token\n        },\n        query: function query() {}\n      },\n      attrs: {// accept: ACCEPT_CONFIG.getAll()\n      },\n      panelShow: false,\n      //选择文件后，展示上传panel\n      collapse: false\n    };\n  },\n  created: function created() {},\n  mounted: function mounted() {// Bus.$on('openUploader', query => {\n    //     this.params = query || {};\n    //     if (this.$refs.uploadBtn) {\n    //         $('#global-uploader-btn').click();\n    //     }\n    // });\n  },\n  computed: {\n    //Uploader实例\n    uploader: function uploader() {\n      return this.$refs.uploader.uploader;\n    }\n  },\n  methods: {\n    onFileAdded: function onFileAdded(file) {\n      // Bus.$emit('fileAdded');\n      this.panelShow = true;\n      this.computeMD5(file);\n    },\n    onFileProgress: function onFileProgress(rootFile, file, chunk) {\n      console.log(\"\\u4E0A\\u4F20\\u4E2D \".concat(file.name, \"\\uFF0Cchunk\\uFF1A\").concat(chunk.startByte / 1024 / 1024, \" ~ \").concat(chunk.endByte / 1024 / 1024));\n    },\n    onFileSuccess: function onFileSuccess(rootFile, file, response, chunk) {\n      var res = JSON.parse(response); // 服务器自定义的错误，这种错误是Uploader无法拦截的\n\n      if (!res.result) {\n        this.$message({\n          message: res.message,\n          type: 'error'\n        });\n        return;\n      } // Bus.$emit('fileSuccess');\n\n\n      console.log('上传成功');\n    },\n    onFileError: function onFileError(rootFile, file, response, chunk) {\n      this.$message({\n        message: response,\n        type: 'error'\n      });\n    },\n\n    /**\n     * 计算md5，实现断点续传及秒传\n     * @param file\n     */\n    computeMD5: function computeMD5(file) {\n      var _this = this;\n\n      var fileReader = new FileReader();\n      var time = new Date().getTime();\n      var md5 = '';\n      file.pause();\n      fileReader.readAsArrayBuffer(file.file);\n\n      fileReader.onload = function (e) {\n        if (file.size != e.target.result.byteLength) {\n          _this.error('Browser reported success but could not read the file until the end.');\n\n          return;\n        }\n\n        md5 = SparkMD5.ArrayBuffer.hash(e.target.result); // 添加额外的参数\n\n        _this.uploader.opts.query = _objectSpread({}, _this.params);\n        console.log(\"MD5\\u8BA1\\u7B97\\u5B8C\\u6BD5\\uFF1A\".concat(file.id, \" \").concat(file.name, \" MD5\\uFF1A\").concat(md5, \" \\u7528\\u65F6\\uFF1A\").concat(new Date().getTime() - time, \" ms\"));\n        file.uniqueIdentifier = md5;\n        file.resume();\n      };\n\n      fileReader.onerror = function () {\n        this.error('FileReader onerror was triggered, maybe the browser aborted due to high memory usage.');\n      };\n    },\n    fileListShow: function fileListShow() {\n      var $list = $('#global-uploader .file-list');\n\n      if ($list.is(':visible')) {\n        $list.slideUp();\n        this.collapse = true;\n      } else {\n        $list.slideDown();\n        this.collapse = false;\n      }\n    },\n    close: function close() {\n      this.uploader.cancel();\n      this.panelShow = false;\n    },\n    error: function error(msg) {\n      this.$notify({\n        title: this.$t('c.false'),\n        message: msg,\n        type: 'error',\n        duration: 2000\n      });\n    }\n  },\n  watch: {},\n  destroyed: function destroyed() {// Bus.$off('openUploader');\n  },\n  components: {}\n};",{"version":3,"sources":["globalUploader.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div id=\"global-uploader\">\n\n        <!-- 上传 -->\n        <uploader\n                ref=\"uploader\"\n                :options=\"options\"\n                :autoStart=\"false\"\n                @file-added=\"onFileAdded\"\n                @file-success=\"onFileSuccess\"\n                @file-progress=\"onFileProgress\"\n                @file-error=\"onFileError\"\n                class=\"uploader-app\">\n            <uploader-unsupport></uploader-unsupport>\n\n            <uploader-btn id=\"global-uploader-btn\" :attrs=\"attrs\" ref=\"uploadBtn\">选择文件</uploader-btn>\n\n            <uploader-list v-show=\"panelShow\">\n                <div class=\"file-panel\" slot-scope=\"props\" :class=\"{'collapse': collapse}\">\n                    <div class=\"file-title\">\n                        <h2>文件列表</h2>\n                        <div class=\"operate\">\n                            <el-button @click=\"fileListShow\" type=\"text\" :title=\"collapse ? '展开':'折叠' \">\n                                <i class=\"iconfont\" :class=\"collapse ? 'inuc-fullscreen': 'inuc-minus-round'\"></i>\n                            </el-button>\n                            <el-button @click=\"close\" type=\"text\" title=\"关闭\">\n                                <i class=\"iconfont icon-close\"></i>\n                            </el-button>\n                        </div>\n                    </div>\n\n                    <ul class=\"file-list\">\n                        <li v-for=\"file in props.fileList\" :key=\"file.id\">\n                            <uploader-file :class=\"'file_' + file.id\" ref=\"files\" :file=\"file\" :list=\"true\"></uploader-file>\n                        </li>\n                        <div class=\"no-file\" v-if=\"!props.fileList.length\"><i class=\"iconfont icon-empty-file\"></i> 暂无待上传文件</div>\n                    </ul>\n                </div>\n            </uploader-list>\n\n        </uploader>\n\n    </div>\n</template>\n\n<script>\n    /**\n     *   全局上传插件\n     *   调用方法：Bus.$emit('openUploader', {}) 打开文件选择框，参数为需要传递的额外参数\n     *   监听函数：Bus.$on('fileAdded', fn); 文件选择后的回调\n     *            Bus.$on('fileSuccess', fn); 文件上传成功的回调\n     */\n   \n    // import Bus from './js/bus';\n    import SparkMD5 from 'spark-md5';\n\n    export default {\n        data() {\n            return {\n                options: {\n                    target: '/index/fileUpload',\n                    chunkSize: 5 * 1024 * 102,\n                    fileParameterName: 'param',\n                    maxChunkRetries: 3,\n                    testChunks: true,   //是否开启服务器分片校验\n                    // 服务器分片校验函数，秒传及断点续传基础\n                    checkChunkUploadedByResponse: function (chunk, message) {\n                        let objMessage = JSON.parse(message);\n                        if (objMessage.skipUpload) {\n                            return true;\n                        }\n                        return (objMessage.uploaded || []).indexOf(chunk.offset + 1) >= 0\n                    },\n                    headers: {\n                        // Authorization: Ticket.get() && \"Bearer \" + Ticket.get().access_token\n                    },\n                    query() {\n                    }\n                },\n                attrs: {\n                    // accept: ACCEPT_CONFIG.getAll()\n                },\n                panelShow: false,   //选择文件后，展示上传panel\n                collapse: false,\n            }\n        },\n        created() {\n        },\n        mounted() {\n            // Bus.$on('openUploader', query => {\n            //     this.params = query || {};\n            //     if (this.$refs.uploadBtn) {\n            //         $('#global-uploader-btn').click();\n            //     }\n            // });\n        },\n        computed: {\n            //Uploader实例\n            uploader() {\n                return this.$refs.uploader.uploader;\n            }\n        },\n        methods: {\n            onFileAdded(file) {\n                // Bus.$emit('fileAdded');\n                this.panelShow = true;\n                this.computeMD5(file);\n            },\n            onFileProgress(rootFile, file, chunk) {\n                console.log(`上传中 ${file.name}，chunk：${chunk.startByte / 1024 / 1024} ~ ${chunk.endByte / 1024 / 1024}`)\n            },\n            onFileSuccess(rootFile, file, response, chunk) {\n                let res = JSON.parse(response);\n                // 服务器自定义的错误，这种错误是Uploader无法拦截的\n                if (!res.result) {\n                    this.$message({ message: res.message, type: 'error' });\n                    return\n                }\n                // Bus.$emit('fileSuccess');\n                console.log('上传成功');\n            },\n            onFileError(rootFile, file, response, chunk) {\n                this.$message({\n                    message: response,\n                    type: 'error'\n                })\n            },\n            /**\n             * 计算md5，实现断点续传及秒传\n             * @param file\n             */\n            computeMD5(file) {\n                let fileReader = new FileReader();\n                let time = new Date().getTime();\n                let md5 = '';\n                file.pause();\n                fileReader.readAsArrayBuffer(file.file);\n                fileReader.onload = (e => {\n                    if (file.size != e.target.result.byteLength) {\n                        this.error('Browser reported success but could not read the file until the end.');\n                        return\n                    }\n                    md5 = SparkMD5.ArrayBuffer.hash(e.target.result);\n                    // 添加额外的参数\n                    this.uploader.opts.query = {\n                        ...this.params\n                    }\n                    console.log(`MD5计算完毕：${file.id} ${file.name} MD5：${md5} 用时：${new Date().getTime() - time} ms`);\n                    file.uniqueIdentifier = md5;\n                    file.resume();\n                });\n                fileReader.onerror = function () {\n                    this.error('FileReader onerror was triggered, maybe the browser aborted due to high memory usage.');\n                };\n            },\n            fileListShow() {\n                let $list = $('#global-uploader .file-list');\n                if ($list.is(':visible')) {\n                    $list.slideUp();\n                    this.collapse = true;\n                } else {\n                    $list.slideDown();\n                    this.collapse = false;\n                }\n            },\n            close() {\n                this.uploader.cancel();\n                this.panelShow = false;\n            },\n            error(msg) {\n                this.$notify({\n                    title: this.$t('c.false'),\n                    message: msg,\n                    type: 'error',\n                    duration: 2000\n                })\n            }\n        },\n        watch: {},\n        destroyed() {\n            // Bus.$off('openUploader');\n        },\n        components: {}\n    }\n</script>\n\n<style scoped lang=\"scss\">\n    #global-uploader {\n        position: fixed;\n        z-index: 20;\n        right: 15px;\n        bottom: 15px;\n        .uploader-app {\n            width: 520px;\n        }\n        .file-panel {\n            background-color: #fff;\n            border: 1px solid #e2e2e2;\n            border-radius: 7px 7px 0 0;\n            box-shadow: 0 0 10px rgba(0, 0, 0, .2);\n            .file-title {\n                display: flex;\n                height: 40px;\n                line-height: 40px;\n                padding: 0 15px;\n                border-bottom: 1px solid #ddd;\n                .operate {\n                    flex: 1;\n                    text-align: right;\n                }\n            }\n            .file-list {\n                position: relative;\n                height: 240px;\n                overflow-x: hidden;\n                overflow-y: auto;\n                background-color: #fff;\n                > li {\n                    background-color: #fff;\n                }\n            }\n            &.collapse {\n                .file-title {\n                    background-color: #E7ECF2;\n                }\n            }\n        }\n        .no-file {\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            font-size: 16px;\n        }\n        // /deep/.uploader-file-icon {\n        //     &:before {\n        //         content: '' !important;\n        //     }\n        //     &[icon=image] {\n        //         background: url(./images/image-icon.png);\n        //     }\n        //     &[icon=video] {\n        //         background: url(./images/video-icon.png);\n        //     }\n        //     &[icon=document] {\n        //         background: url(./images/text-icon.png);\n        //     }\n        // }\n        // /deep/.uploader-file-actions > span {\n        //     margin-right: 6px;\n        // }\n    }\n    /* 隐藏上传按钮 */\n    #global-uploader-btn {\n        position: absolute;\n        clip: rect(0, 0, 0, 0);\n    }\n</style>"],"sourceRoot":"src/components"}]}
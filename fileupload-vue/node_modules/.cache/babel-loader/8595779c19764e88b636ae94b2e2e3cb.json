{"remainingRequest":"/Users/liquanfang/projects/fileupload/fileupload-vue/node_modules/babel-loader/lib/index.js!/Users/liquanfang/projects/fileupload/fileupload-vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/liquanfang/projects/fileupload/fileupload-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liquanfang/projects/fileupload/fileupload-vue/src/components/upload.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/liquanfang/projects/fileupload/fileupload-vue/src/components/upload.vue","mtime":1555857190016},{"path":"/Users/liquanfang/projects/fileupload/fileupload-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liquanfang/projects/fileupload/fileupload-vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/liquanfang/projects/fileupload/fileupload-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liquanfang/projects/fileupload/fileupload-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _JSON$stringify from \"/Users/liquanfang/projects/fileupload/fileupload-vue/node_modules/@babel/runtime-corejs2/core-js/json/stringify\";\nimport _objectSpread from \"/Users/liquanfang/projects/fileupload/fileupload-vue/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport SparkMD5 from \"spark-md5\";\nexport default {\n  data: function data() {\n    return {\n      options: {\n        target: \"\",\n        chunkSize: 5 * 1024 * 1024,\n        fileParameterName: \"file\",\n        maxChunkRetries: 3,\n        testChunks: true,\n        //是否开启服务器分片校验\n        // 服务器分片校验函数，秒传及断点续传基础\n        checkChunkUploadedByResponse: function checkChunkUploadedByResponse(chunk, message) {\n          var objMessage = JSON.parse(message);\n\n          if (objMessage.skipUpload) {\n            return true;\n          }\n\n          return (objMessage.uploaded || []).indexOf(chunk.offset + 1) >= 0;\n        },\n        query: function query() {}\n      },\n      attrs: {\n        accept: \"image/*\"\n      }\n    };\n  },\n  //   props:[\"accept\"],\n  computed: {\n    uploader: function uploader() {\n      return this.$refs.uploader.uploader;\n    }\n  },\n  methods: {\n    onFileAdded: function onFileAdded(file) {\n      this.panelShow = true;\n      this.computeMD5(file);\n    },\n    onFileProgress: function onFileProgress(rootFile, file, chunk) {\n      console.log(\"\\u4E0A\\u4F20\\u4E2D \".concat(file.name, \"\\uFF0Cchunk\\uFF1A\").concat(chunk.startByte / 1024 / 1024, \" ~ \").concat(chunk.endByte / 1024 / 1024));\n    },\n    onFileSuccess: function onFileSuccess(rootFile, file, response, chunk) {\n      // let res = JSON.parse(response);\n      // 服务器自定义的错误，这种错误是Uploader无法拦截的\n      // if (!res.result) {\n      //   this.$message({ message: res.message, type: \"error\" });\n      //   return;\n      // }\n      console.log(\"上传成功\");\n    },\n    onFileError: function onFileError(rootFile, file, response, chunk) {\n      this.$message({\n        message: response,\n        type: \"error\"\n      });\n    },\n    error: function error(msg) {\n      console.log(\"error:\" + msg); // this.$notify({\n      //     title: this.$t('c.false'),\n      //     message: msg,\n      //     type: 'error',\n      //     duration: 2000\n      // })\n    },\n\n    /**\n     * 计算md5，实现断点续传及秒传\n     * @param file\n     */\n    computeMD5: function computeMD5(file) {\n      var _this = this;\n\n      var fileReader = new FileReader();\n      var time = new Date().getTime();\n      var md5 = \"\";\n      file.pause();\n      fileReader.readAsArrayBuffer(file.file);\n\n      fileReader.onload = function (e) {\n        if (file.size != e.target.result.byteLength) {\n          _this.error(\"Browser reported success but could not read the file until the end.\");\n\n          return;\n        }\n\n        md5 = SparkMD5.ArrayBuffer.hash(e.target.result); // 添加额外的参数\n\n        _this.uploader.opts.query = _objectSpread({}, _this.params);\n        console.log(_JSON$stringify(_this.params));\n        console.log(\"MD5\\u8BA1\\u7B97\\u5B8C\\u6BD5\\uFF1A\".concat(file.id, \" \").concat(file.name, \" MD5\\uFF1A\").concat(md5, \" \\u7528\\u65F6\\uFF1A\").concat(new Date().getTime() - time, \" ms\"));\n        file.uniqueIdentifier = md5;\n        file.resume();\n      };\n\n      fileReader.onerror = function () {\n        this.error(\"FileReader onerror was triggered, maybe the browser aborted due to high memory usage.\");\n      };\n    }\n  }\n};",{"version":3,"sources":["upload.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <uploader\n    options=\"options\"\n    class=\"uploader-example\"\n    @file-added=\"onFileAdded\"\n    @file-success=\"onFileSuccess\"\n    @file-progress=\"onFileProgress\"\n    @file-error=\"onFileError\"\n    :autoStart=\"false\"\n    ref=\"uploader\"\n  >\n    <uploader-unsupport></uploader-unsupport>\n    <uploader-drop>\n      <p>Drop files here to upload or</p>\n      <uploader-btn>select files</uploader-btn>\n      <uploader-btn :attrs=\"attrs\">select images</uploader-btn>\n      <uploader-btn :directory=\"true\">select folder</uploader-btn>\n    </uploader-drop>\n    <uploader-list></uploader-list>\n  </uploader>\n</template>\n\n<script>\nimport SparkMD5 from \"spark-md5\";\n\nexport default {\n  data() {\n    return {\n      options: {\n        target: \"\",\n        chunkSize: 5 * 1024 * 1024,\n        fileParameterName: \"file\",\n        maxChunkRetries: 3,\n        testChunks: true, //是否开启服务器分片校验\n        // 服务器分片校验函数，秒传及断点续传基础\n        checkChunkUploadedByResponse: function(chunk, message) {\n          let objMessage = JSON.parse(message);\n          if (objMessage.skipUpload) {\n            return true;\n          }\n          return (objMessage.uploaded || []).indexOf(chunk.offset + 1) >= 0;\n        },\n        query() {}\n      },\n      attrs: {\n        accept: \"image/*\"\n      }\n    };\n  },\n  //   props:[\"accept\"],\n  computed: {\n    uploader() {\n      return this.$refs.uploader.uploader;\n    }\n  },\n  methods: {\n    onFileAdded(file) {\n      this.panelShow = true;\n      this.computeMD5(file);\n    },\n    onFileProgress(rootFile, file, chunk) {\n      console.log(\n        `上传中 ${file.name}，chunk：${chunk.startByte /\n          1024 /\n          1024} ~ ${chunk.endByte / 1024 / 1024}`\n      );\n    },\n    onFileSuccess(rootFile, file, response, chunk) {\n      // let res = JSON.parse(response);\n      // 服务器自定义的错误，这种错误是Uploader无法拦截的\n      // if (!res.result) {\n      //   this.$message({ message: res.message, type: \"error\" });\n      //   return;\n      // }\n\n      console.log(\"上传成功\");\n    },\n    onFileError(rootFile, file, response, chunk) {\n      this.$message({\n        message: response,\n        type: \"error\"\n      });\n    },\n    error(msg) {\n      console.log(\"error:\" + msg);\n      // this.$notify({\n      //     title: this.$t('c.false'),\n      //     message: msg,\n      //     type: 'error',\n      //     duration: 2000\n      // })\n    },\n    /**\n     * 计算md5，实现断点续传及秒传\n     * @param file\n     */\n    computeMD5(file) {\n      let fileReader = new FileReader();\n      let time = new Date().getTime();\n      let md5 = \"\";\n      file.pause();\n\n      fileReader.readAsArrayBuffer(file.file);\n      fileReader.onload = e => {\n        if (file.size != e.target.result.byteLength) {\n          this.error(\n            \"Browser reported success but could not read the file until the end.\"\n          );\n          return;\n        }\n        md5 = SparkMD5.ArrayBuffer.hash(e.target.result);\n        // 添加额外的参数\n        this.uploader.opts.query = {\n          ...this.params\n        };\n        console.log(JSON.stringify(this.params));\n        console.log(\n          `MD5计算完毕：${file.id} ${\n            file.name\n          } MD5：${md5} 用时：${new Date().getTime() - time} ms`\n        );\n        file.uniqueIdentifier = md5;\n        file.resume();\n      };\n      fileReader.onerror = function() {\n        this.error(\n          \"FileReader onerror was triggered, maybe the browser aborted due to high memory usage.\"\n        );\n      };\n    }\n  }\n};\n</script>\n\n<style>\n.uploader-example {\n  width: 880px;\n  padding: 15px;\n  margin: 40px auto 0;\n  font-size: 12px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.4);\n}\n.uploader-example .uploader-btn {\n  margin-right: 4px;\n}\n.uploader-example .uploader-list {\n  max-height: 440px;\n  overflow: auto;\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n</style>"],"sourceRoot":"src/components"}]}
{"remainingRequest":"/Users/liquanfang/projects/fileupload/fileupload-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liquanfang/projects/fileupload/fileupload-vue/src/components/ChunkUpload.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/liquanfang/projects/fileupload/fileupload-vue/src/components/ChunkUpload.vue","mtime":1555861854718},{"path":"/Users/liquanfang/projects/fileupload/fileupload-vue/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/liquanfang/projects/fileupload/fileupload-vue/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/liquanfang/projects/fileupload/fileupload-vue/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/liquanfang/projects/fileupload/fileupload-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liquanfang/projects/fileupload/fileupload-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.uploader-example {\n  width: 880px;\n  padding: 15px;\n  margin: 40px auto 0;\n  font-size: 12px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.4);\n}\n.uploader-example .uploader-btn {\n  margin-right: 4px;\n}\n.uploader-example .uploader-list {\n  max-height: 440px;\n  overflow: auto;\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n",{"version":3,"sources":["ChunkUpload.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ChunkUpload.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <uploader\n    :options=\"options\"\n    class=\"uploader-example\"\n    @file-added=\"onFileAdded\"\n    @file-success=\"onFileSuccess\"\n    @file-progress=\"onFileProgress\"\n    @file-error=\"onFileError\"\n    :autoStart=\"false\"\n    ref=\"uploader\"\n   \n    :file-status-text=\"statusText\"\n  >\n    <uploader-unsupport></uploader-unsupport>\n    <uploader-btn :attrs=\"attrs\">选择文件</uploader-btn>\n   \n    <uploader-list></uploader-list>\n  </uploader>\n</template>\n\n<script>\nimport SparkMD5 from \"spark-md5\";\n\nexport default {\n  data() {\n    return {\n      options: {\n        target: \"http://localhost:8080/index/fileUpload\",\n        chunkSize: 5 * 1024 * 1024,\n        fileParameterName: \"file\",\n        maxChunkRetries: 3,\n        testChunks: true, //是否开启服务器分片校验\n        // 服务器分片校验函数，秒传及断点续传基础\n        checkChunkUploadedByResponse: function(chunk, message) {\n          let objMessage = JSON.parse(message);\n          if (objMessage.skipUpload) {\n            return true;\n          }\n          return (objMessage.uploaded || []).indexOf(chunk.offset + 1) >= 0;\n        }\n      },\n      attrs: {\n          accept: 'application/octet-stream'\n        },\n        statusText: {\n          success: '成功了',\n          error: '出错了',\n          uploading: '上传中',\n          paused: '暂停中',\n          waiting: '等待中'\n        }\n    };\n  },\n  //   props:[\"accept\"],\n  computed: {\n    uploader() {\n      return this.$refs.uploader.uploader;\n    }\n  },\n  methods: {\n    onFileAdded(file) {\n      this.panelShow = true;\n      this.computeMD5(file);\n    },\n    onFileProgress(rootFile, file, chunk) {\n      console.log(\n        `上传中 ${file.name}，chunk：${chunk.startByte /\n          1024 /\n          1024} ~ ${chunk.endByte / 1024 / 1024}`\n      );\n    },\n    onFileSuccess(rootFile, file, response, chunk) {\n      // let res = JSON.parse(response);\n      // 服务器自定义的错误，这种错误是Uploader无法拦截的\n      // if (!res.result) {\n      //   this.$message({ message: res.message, type: \"error\" });\n      //   return;\n      // }\n\n      console.log(\"上传成功\");\n    },\n    onFileError(rootFile, file, response, chunk) {\n      this.$message({\n        message: response,\n        type: \"error\"\n      });\n    },\n    error(msg) {\n      console.log(\"error:\" + msg);\n      // this.$notify({\n      //     title: this.$t('c.false'),\n      //     message: msg,\n      //     type: 'error',\n      //     duration: 2000\n      // })\n    },\n    /**\n     * 计算md5，实现断点续传及秒传\n     * @param file\n     */\n    computeMD5(file) {\n      let fileReader = new FileReader();\n      let time = new Date().getTime();\n      let md5 = \"\";\n      file.pause();\n\n      fileReader.readAsArrayBuffer(file.file);\n      fileReader.onload = e => {\n        if (file.size != e.target.result.byteLength) {\n          this.error(\n            \"Browser reported success but could not read the file until the end.\"\n          );\n          return;\n        }\n        md5 = SparkMD5.ArrayBuffer.hash(e.target.result);\n        // 添加额外的参数\n        this.uploader.opts.query = {\n          ...this.params\n        };\n        console.log(JSON.stringify(this.params));\n        console.log(\n          `MD5计算完毕：${file.id} ${\n            file.name\n          } MD5：${md5} 用时：${new Date().getTime() - time} ms`\n        );\n        file.uniqueIdentifier = md5;\n        file.resume();\n      };\n      fileReader.onerror = function() {\n        this.error(\n          \"FileReader onerror was triggered, maybe the browser aborted due to high memory usage.\"\n        );\n      };\n    }\n  }\n};\n</script>\n\n<style>\n.uploader-example {\n  width: 880px;\n  padding: 15px;\n  margin: 40px auto 0;\n  font-size: 12px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.4);\n}\n.uploader-example .uploader-btn {\n  margin-right: 4px;\n}\n.uploader-example .uploader-list {\n  max-height: 440px;\n  overflow: auto;\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n</style>"]}]}